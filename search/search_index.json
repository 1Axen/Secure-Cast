{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#securecast","title":"SecureCast","text":"<p>SecureCast is the top-level interface for interacting with the system. It is returned by <code>require(SecureCast)</code>.</p>"},{"location":"#members","title":"Members","text":"<p>Utility  Snapshots</p> <p>The snapshots utility used by the simulation, you can use this to retrieve player positions back in time for lag compensation.</p> <p>Warning</p> <p>Snapshots can only be used on the server, calling any of the methods within the utility will throw an error when called from the client!</p>"},{"location":"#methods","title":"Methods","text":"<p>void  Initialize ( )</p> <p>Initialize the simulation for the current context.</p> <p>Warning</p> <p>Initialize can only be called once per context, subsequent calls will result in an error.</p> <p>void  Cast ( Player Caster,      string Type,      Vector3 Origin Vector3 Direction number Timestamp PVInstance? PVInstance Modifier? Modifier )</p> <p>Casts a new projectile. A Modifier can be used to modify the behaviour of a projectile on a per cast basis. A PVInstance must exist on the client in order for the projectile to be rendered.</p> <p>Danger</p> <p>When using a Modifier make sure that all clients and the server use the same modifier, improper modifier usage can result in simulation desync.</p>"},{"location":"API/definitions/","title":"Definitions","text":""},{"location":"API/definitions/#definitions","title":"Definitions","text":"<p>This page contains all types defined and used by SecureCast.</p> <p>type  Modifier ( number Loss,      number Power,      number Angle,      number Gravity,      number Velocity,      number Lifetime,      BindableEvent? OnImpact,      BindableEvent? OnDestroyed,      BindableEvent? OnIntersection,      RaycastParams? RaycastFilter, )</p> <p>Modifiers are a powerful tool that allows you to define per cast functionality seperate from the base projectile definition.</p> Custom event handling<pre><code>local Bindable = Instance.new(\"BindableEvent\")\nBindable.Event:Connect(function(Type: string, Event: string, ...)\nif Event == \"OnDestroyed\" then\n--&gt; No need to keep a reference to the connection \n--&gt; since destroy will take care of it for us\nBindable:Destroy()\nelseif Event == \"OnImpact\" then\nelseif Event == \"OnIntersection\" then\nend\nend)\nlocal Modifier = {\nOnImpact = Bindable,\nOnDestroyed = Bindable,\nOnIntersection = Bindable,\n}\nSecureCast.Cast(Player, \"Bullet\", Origin, Direction, os.clock() - Latency, nil, Modifier)\n</code></pre> <p>Danger</p> <p>When using Modifiers make sure that all clients and the server use the same modifier, improper modifier usage can result in simulation desync.</p> <p>type  Definition ( number Loss,      number Power,      number Angle,      number Gravity,      number Velocity,      number Lifetime,      BindableEvent? Output,      RaycastParams? RaycastFilter,      void OnImpact (          Player Caster,          Vector3 Direction,          Instance Instance,          Vector3 Normal,          Vector3 Position,          Enum.Material Material \u2003),      void OnDestroyed (          Player Caster,          Vector3 Position \u2003),      void OnIntersection (          Player Caster,          Vector3 Direction,          string Part,          Player Victim,          Vector3 Position \u2003), )</p> <p>This type represents the way that projectiles should be defined within the system. Refer to the template bullet included within the GitHub repository for an example.</p> <p>type  Record ( {CFrame} Parts,      Vector3 Position, )</p> <p>type  Snapshot ( number Time,      Voxels.Grid Grid,      {[Player]: Record} Records, )</p>"},{"location":"API/settings/","title":"Settings","text":""},{"location":"API/settings/#settings","title":"Settings","text":"<p>This page contains all settings used by SecureCast. These can be found in the Settings module under the SecureCast module.</p> <p>number  VoxelSize</p> <p>The size of each voxel in studs.</p> <p>Vector3  VoxelGridSize</p> <p>The size of the voxel grid in studs.</p> <p>Danger</p> <p>Be careful when editing this value, anything smaller than the playable area will result in players being missed by the server raycasts.</p> <p>number  SnapshotLifetime</p> <p>The lifetime of snapshots in seconds.</p> <p>Danger</p> <p>Be careful when editing this value, very small values will result in players with high ping not being able to land shots but high values may result in players being hit behind cover long after they have gone behind it.</p> <p>Instance  Definitions</p> <p>The container for projectile definitions modules.</p> <p>{[Enum.Material]: number}  SurfaceHardness</p> <p>An array of each materials hardness. The needed penetration power can be calculate with the following formula: <code>Power = SurfaceDepth * SurfaceHardness</code></p> <p>number  RicochetHardness</p> <p>The minimum surface hardness needed for a projectile to ricochet off of something. This is ignored when a projectile has a ricochet angle set to <code>math.pi * 2</code>.</p> <p>{string}  Parts</p> <p>An array containing the names of every hitbox in a players character, ordered from most to least damage.</p> <p>{Vector3}  PartsSizes</p> <p>An array containing the halved sizes of every hitbox in a players character, in the same order as the <code>Parts</code> array.</p> <p>Vector3  HitboxSize</p> <p>The maximum halved size of a players character, it needs to contain the character at it's maximum arm span.</p>"},{"location":"API/snapshots/","title":"Snapshots","text":""},{"location":"API/snapshots/#snapshots","title":"Snapshots","text":"<p>The snapshots utility is used by the simulation to take \"snapshots\" of player positions in the past for lag compensation.</p> <p>Note</p> <p>Times must be retrieved using os.clock()</p>"},{"location":"API/snapshots/#methods","title":"Methods","text":"<p>{[string]: CFrame}?  GetPlayerAtTime ( Player Player number Time )</p> <p>Returns an array containing the CFrame of each of the player's hitboxes in the past, returns nothing when no snapshots containing the player can be found.</p> <p>{[Player]: {[string]: CFrame}}  GetPlayersAtTime ( number Time )</p> <p>Returns an array containing the CFrame of each of the hitboxes of every player in the past.</p> <p>Snapshot?, Snapshot?, number?  GetSnapshotsAtTime ( number Time )</p> <p>Returns a tuple containing the previous snapshot, next snapshot and the fraction used for lerping between them, returns nothing if no snapshots can be found for the given time.</p> <p>void  CreatePlayersSnapshot ( number Time )</p> <p>Creates a snapshot of every players hitbox at the given time.</p> <p>Danger</p> <p>This method should not be called or it may result in undefined behaviour, this is already called by SecureCast internally.</p>"},{"location":"Getting%20Started/Installation/","title":"Installation","text":"<p>Installing the module into your place is simple, we will cover the different methods of installation down below.</p>"},{"location":"Getting%20Started/Installation/#with-wally","title":"With Wally","text":"<p>SecureCast is available as a Wally package. Navigate to your projects <code>wally.toml</code> file and add the following dependancy <pre><code>secure-cast = \"1axen/secure-cast\"\n</code></pre> After adding SecureCast to your dependencies you will need to install it by running <pre><code>wally install\n</code></pre></p>"},{"location":"Getting%20Started/Installation/#with-git","title":"With git","text":"<p>SecureCast can be directly cloned from GitHub <pre><code>git clone https://github.com/1Axen/Secure-Cast.git\n</code></pre></p> <p>Warning</p> <p>The master branch of the GitHub repository contains the latest development version and may not be stable.</p>"},{"location":"Getting%20Started/Installation/#with-github-releases","title":"With GitHub releases","text":"<p>The latest stable version of the module can be downloaded from https://github.com/1Axen/Secure-Cast/releases After downloading the RBXM file insert it into ReplicatedStorage or any other shared container of your choice.</p>"},{"location":"Getting%20Started/Simulation/","title":"Simulation","text":"<p>In this section we will explore setting up a basic simulation along side the different things we must account for in order to create a working simulation.</p>"},{"location":"Getting%20Started/Simulation/#setting-up-your-workspace","title":"Setting up your workspace","text":"<p>SecureCast requires a <code>Map</code> and <code>Characters</code> folder placed within workspace to function correctly. All parts of the map must be a descendant of the <code>Map</code> folder.  All player characters must be paranted to the <code>Characters</code> folder.</p> <p>We will also need an <code>Events</code> folder within ReplicatedStorage. Add a RemoteEvent named <code>Simulation</code> under the <code>Events</code> folder.</p>"},{"location":"Getting%20Started/Simulation/#setting-up-your-client","title":"Setting up your client","text":"<p>Create a LocalScript and place it under StarterPlayerScripts. Copy and paste the following code into the script you just created: Example client simulation<pre><code>--!strict\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal SecureCast = require(ReplicatedStorage.SecureCast)\nlocal Player = Players.LocalPlayer\nlocal Mouse = Player:GetMouse()\nlocal Events = ReplicatedStorage.Events\nlocal SimulateEvent = Events.Simulate\n--&gt; Only call once per context\nSecureCast.Initialize()\nUserInputService.InputBegan:Connect(function(Input, GPE)\nif GPE or Input.UserInputType ~= Enum.UserInputType.MouseButton1 then\nreturn\nend\nlocal Character = Player.Character\nlocal Head = Character and Character:FindFirstChild(\"Head\")\nif not Head then\nreturn\nend\nlocal Origin = Head.Position\nlocal Direction = (Mouse.Hit.Position - Origin).Unit\n--&gt; Replicate to the server\nSimulateEvent:FireServer(Origin, Direction, workspace:GetServerTimeNow())\n--&gt; Cast the projectile within our own simulation\nSecureCast.Cast(Player, \"Bullet\", Origin, Direction, os.clock())\nend)\nSimulateEvent.OnClientEvent:Connect(function(Caster: Player, Type: string, Origin: Vector3, Direction: Vector3, PVInstance: PVInstance?, Modifer)\nif Caster ~= Player then\nSecureCast.Cast(Caster, Type, Origin, Direction, os.clock(), PVInstance, Modifer)\nend\nend)\n</code></pre></p>"},{"location":"Getting%20Started/Simulation/#setting-up-your-server","title":"Setting up your server","text":"<p>Create a Script and place it under ServerScriptService. Copy and paste the following code into the script you just created: Example server simulation<pre><code>--!strict\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal RunService = game:GetService(\"RunService\")\nlocal SecureCast = require(ReplicatedStorage.SecureCast)\nlocal MAXIMUM_LATENCY = 0.8 -- 800 ms\nlocal Events = ReplicatedStorage.Events\nlocal SimulateEvent = Events.Simulate\n--&gt; Only call once per context\nSecureCast.Initialize()\nPlayers.PlayerAdded:Connect(function(Player: Player)\n--&gt; We must parent all characters to the Characters folder within workspace\nPlayer.CharacterAdded:Connect(function(Character)\nRunService.PostSimulation:Wait()\nCharacter.Parent = workspace.Characters\nend)\n--&gt; Disable raycast interactions with accessories\nPlayer.CharacterAppearanceLoaded:Connect(function(Character)\nfor _, Child in Character:GetChildren() do\nif not Child:IsA(\"Accessory\") then\ncontinue\nend\nlocal Handle: BasePart? = Child:FindFirstChild(\"Handle\") :: BasePart\nif Handle then\nHandle.CanQuery = false\nend\nend\nend)\nend)\nReplicatedStorage.Events.Simulate.OnServerEvent:Connect(function(Player: Player, Origin: Vector3, Direction: Vector3, Timestamp: number)\n--&gt; It is best to have calculate these values at the top\n--&gt; We can have the most accurate latency values this way\n--&gt; Calculating them further down may result in skewed results\n--&gt; We must take into account character interpolation\n--&gt; The best estimate for this value available is (PLAYER_PING + 48 ms)\n--&gt; If we do not factor in interpolation we will end up with inaccurate lag compensation\nlocal Time = os.clock()\nlocal Latency = (workspace:GetServerTimeNow() - Timestamp)\nlocal Interpolation = (Player:GetNetworkPing() + SecureCast.Settings.Interpolation)\n--&gt; Validate the latency and avoid players with very slow connections\nif (Latency &lt; 0) or (Latency &gt; MAXIMUM_LATENCY) then\nreturn\nend\n--&gt; Validate the projectile origin\nlocal Character = Player.Character\nlocal Head: BasePart? = Character and Character:FindFirstChild(\"Head\") :: BasePart\nif not Head then\nreturn\nend\nlocal Distance = (Origin - Head.Position).Magnitude\nif Distance &gt; 5 then\nwarn(`{Player} is too far from the projectile origin.`)\nreturn\nend\n--&gt; Replicate the projectile to all other clients\nSimulateEvent:FireAllClients(Player, \"Bullet\", Origin, Direction)\n--&gt; Cast the projectile within our own simulation\nSecureCast.Cast(Player, \"Bullet\", Origin, Direction, Time - Latency - Interpolation)\nend)\n</code></pre></p>"},{"location":"Getting%20Started/Simulation/#test-your-simulation","title":"Test your simulation","text":"<p>You can test if your simulation is working properly by going into a Local Test Server.</p> <p>Note</p> <p>Make sure to create 2 seperate teams or the players will be ignored due to being on the same team.</p>"}]}